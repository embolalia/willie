#!/usr/bin/env python
"""
Willie - An IRC Bot
Copyright 2008, Sean B. Palmer, inamidst.com
Licensed under the Eiffel Forum License 2.

http://willie.dftba.net
"""

import sys, os, imp, optparse
from textwrap import dedent as trim
from config import Config
import config
import tools
import signal

#Check if data folder exists under new or previous names. If not, use ~/.willie
#(which will be created later on, if it doesn't yet exist).
dotdir = os.path.expanduser('~/.willie')
if not os.path.isdir(dotdir):
    if os.path.isdir(os.path.expanduser('~/.jenni')):
        dotdir = os.path.expanduser('~/.jenni')
    elif os.path.isdir(os.path.expanduser('~/.phenny')):
        dotdir = os.path.expanduser('~/.phenny')

configpath = os.path.expanduser(dotdir + '/default.py')

def check_python_version():
    if sys.version_info < (2, 6):
        error = 'Error: Requires Python 2.6 or later. Try python2.6 willie'
        print >> sys.stderr, error
        sys.exit(1)

def check_dotdir():
    if not os.path.isdir(dotdir) or not os.path.isfile(configpath):
        print 'Creating a config directory at ~/.willie...'
        try: os.mkdir(dotdir)
        except Exception, e:
            print >> sys.stderr, 'There was a problem creating %s:' % dotdir
            print >> sys.stderr, e.__class__, str(e)
            print >> sys.stderr, 'Please fix this and then run willie again.'
            sys.exit(1)


def config_names(config):
    config = config or 'default'
    there = os.path.join(dotdir, config)
    if os.path.isfile(there):
        return [there]
    if os.path.isfile(there + '.py'):
        return [there + '.py']

def main(argv=None):
    # Step One: Parse The Command Line
    try:
        parser = optparse.OptionParser('%prog [options]')
        parser.add_option('-c', '--config', metavar='filename', help='use a specific configuration file')
        parser.add_option("-d", '--fork', action="store_true", dest="deamonize", help="Deamonize willie")
        parser.add_option("-q", '--quit', action="store_true", dest="quit", help="Gracefully quit Willie")
        parser.add_option("-k", '--kill', action="store_true", dest="kill", help="Kill Willie")
        parser.add_option('--quiet', action="store_true", dest="quiet", help="Supress all output")
        opts, args = parser.parse_args(argv)
        # Step Two: Check Dependencies

        check_python_version() # require python2.4 or later
        config_name = opts.config or 'default'
        configpath = os.path.join(dotdir, config_name)
        if not os.path.isfile(configpath) and not os.path.isfile(configpath+'.py'):
            print "Welcome to Willie!\nI can't seem to find the configuration file, so let's generate it!\n"
            config.create_config(configpath+'.py')

        # Step Three: Load The Configurations
        if not config_names(opts.config):
            print >> sys.stderr, "Error: specified configuration file not found, this is odd because if things are working according to plans I just showed you a nice configuration generation wizard that should've written the config file!"
            sys.exit(1)

        config_name = config_names(opts.config)[0]
        config_module = Config(config_name)
        config_module.dotdir = dotdir
        config_module.logdir = os.path.abspath('logs')
        if opts.quiet is None:
            opts.quiet = False
        sys.stderr = tools.output_redirect(os.path.join(config_module.logdir, 'stdio.log'), True, opts.quiet)
        sys.stdout = tools.output_redirect(os.path.join(config_module.logdir, 'stdio.log'), False, opts.quiet)

        #Handle --quit, --kill and saving the PID to file
        if opts.config is None:
            pid_file_path = os.path.join(os.getcwd(), '.pid-default')
        else:
            pid_file_path = os.path.join(os.getcwd(), '.pid-%s' % opts.config)
        if os.path.isfile(pid_file_path):
            pid_file = open(pid_file_path, 'r')
            old_pid = int(pid_file.read())
            pid_file.close()
            if tools.check_pid(old_pid):
                if opts.quit is None and opts.kill is None:
                    print >> sys.stderr, 'There\'s already a Willie instance running with this config file'
                    print >> sys.stderr, 'Try using the --quit or the --kill options'
                    sys.exit(1)
                elif opts.kill:
                    print >> sys.stderr, 'Killing the willie'
                    os.kill(old_pid, signal.SIGKILL)
                    sys.exit(0)
                elif opts.quit:
                    print >> sys.stderr, 'Singaling Willie to stop gracefully'
                    os.kill(old_pid, signal.SIGUSR1)
                    sys.exit(0)
            elif not tools.check_pid(old_pid) and opts.kill or opts.quit:
                print >> sys.stderr, 'Willie is not running!'
                sys.exit(1)
        if opts.deamonize is not None:
            child_pid = os.fork()
            if child_pid is not 0:
                sys.exit()
        pid_file = open(pid_file_path, 'w')
        pid_file.write(str(os.getpid()))
        pid_file.close()
        config_module.pid_file_path = pid_file_path

        
        # Step Four: Load willie
        try: from __init__ import run
        except ImportError:
            try: from willie import run
            except ImportError:
                print >> sys.stderr, "Error: Couldn't find willie to import"
                sys.exit(1)

        # Step Five: Initialise And Run willie
        run(config_module)
    except KeyboardInterrupt:
        print "\n\nInterrupted"
        os._exit(1)
if __name__ == '__main__':
    main()
